Spring course notes
------------------------------------

000.overview

	Spring definition:
		Integrates enterprise modules
		There is Spring framework and various projects built on top of it
		Spring framework contains various modules, like Dependency Injection, Transactional data and persistence, Web MVC, WebFlux
		Spring modules are ready for Java 9 Jigsaw
	History:
		Built in 2003
		Complements Java EE by implementing some of its JSR but ignores others
		Spring enterprise apps required a web container, later Spring boot allowed to embed the container into the app while WebFlux allows the app to run on a non web container servers
	Design philosophy
		Allows late architectural decisions
		Flexibility regarding the architectures
		Backward compatibility
		Clear API design
		High quality code
		

001.core
	
	IoC Container
	
		IoC
			IoC - Objects don't construct other objects (dependencies) but define dependencies that are injected by the container as properties (dependency injection).
			Main types: BeanFactory, ApplicationContext. Latter is a bean factory with extended capabilities, like AOP
			
		Container
			Container is represented by the org.springframework.context.ApplicationContext interface. It is configured by the means of configuration metadata (can be XML, annotations, Java code or other means).
			It describes objects of the application and their dependencies
			It has various implementations, e.g.
				ClassPathXmlApplicationContext
				FileSystemXmlApplicationContext
			Structuring multiple xml docs to config spring
				pass them all to the application context constructor or
				nest them with <import/>
			groovy is a good alternative to xml and java bean definitions
			GenericApplicationContext and XmlBeanDefinitionReader/GroovyBeanDefinitionReader can be used to mix both types of config data (groovy and xml)
			
		Beans
			Aliases
		    
		Dependencies
			Constructor injection allows specialization of arguments via types, indexes and names
			Names work only if debug flag is enabled or @ConstructorProperties annotation is present
			p - schema can be used to define a bean with its properties without using <property> tags.
				A bean with properties age and service can be set with p:age="36" p:service-ref="myService"
			c - schema can be used to initialize a bean with constructor arguments without using xml tags
				Similar to the p schema
			@Required annotation on a setter method checks for initialization of the property
			Singleton beans are eagerly loaded by default
			Bean of type org.springframework.beans.factory.config.PropertyPlaceholderConfigurer allows access to properties via ${var}
			idref checks at the property setting time that the bean with the given id exists
			collections can be defined as 'literals'
			in parent child relations of beans, collection properties can be merged (see merge attribute)
			null can be set with <null/>
			Setting nested properties is possible with <property name="fred.bob.sammy" value="123" />
			depends-on can be used to initialize one bean before the other. 
				Usually, it automatically happens because of the dependency resolving, but sometimes the order has to be defined manually because the other bean is used in a static block of this bean
				<bean id="beanOne" class="ExampleBean" depends-on="manager"/>
				<bean id="manager" class="ManagerBean" />
				lazy-init attribute is by default false except if default-lazy-init is set as beans attribute
				autowiring 
					can be set on bean level (autowire attribute)
					4 types: no, byName, byType, constructor
					explicit properties override autowiring
					primary attribute nominates a bean as autowiring candidate
					autowire-candidate=false excludes a bean from being autowired
					beans[default-autowire-candidates] expects a pattern to define which beans will be autowired
				method injection can be used to inject prototype scoped beans into a method of a singleton bean at runtime
					see lookup-method
					@Lookup
				methods of beans can be overridden with the same logic
					see replaced-method
					
		Bean scopes
		Customizing the nature of a bean
		Bean definition inheritance
		Container extension points
		Annotation-based container configuration
		Class path scanning and managed components
		JSR330 standard annotations
		Java-based container configuration
		Environment abstractions
		Registering a load time weaver
		Additional capabilities of the ApplicationContext
		Bean factory
		
	Resources
	Validation, Data Binding and Type Conversion
	Spring Expression Language
	AOP
	Spring AOP APIs
	Null Safety
	Data Buffers and Codecs
	
	
002.testing
003.data-access
004.web
005.web-reactive
006.integration
007.languages
100.spring-boot-reference
200.spring-security-reference
300.spring-shell-reference
400.spring-webflow-reference
500.spring-data-jpa-reference
600.spring-data-rest-reference
700.spring-batch-reference
